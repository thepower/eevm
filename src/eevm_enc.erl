-module(eevm_enc).
%%% ==== [ This file is generated by script, do not edit ] ====
-export([encode/1]).

encode('stop') -> <<16#0:8/big>>;
encode('add') -> <<16#1:8/big>>;
encode('mul') -> <<16#2:8/big>>;
encode('sub') -> <<16#3:8/big>>;
encode('div') -> <<16#4:8/big>>;
encode('sdiv') -> <<16#5:8/big>>;
encode('mod') -> <<16#6:8/big>>;
encode('smod') -> <<16#7:8/big>>;
encode('addmod') -> <<16#8:8/big>>;
encode('mulmod') -> <<16#9:8/big>>;
encode('exp') -> <<16#A:8/big>>;
encode('signextend') -> <<16#B:8/big>>;
encode('lt') -> <<16#10:8/big>>;
encode('gt') -> <<16#11:8/big>>;
encode('slt') -> <<16#12:8/big>>;
encode('sgt') -> <<16#13:8/big>>;
encode('eq') -> <<16#14:8/big>>;
encode('iszero') -> <<16#15:8/big>>;
encode('and') -> <<16#16:8/big>>;
encode('or') -> <<16#17:8/big>>;
encode('xor') -> <<16#18:8/big>>;
encode('not') -> <<16#19:8/big>>;
encode('byte') -> <<16#1A:8/big>>;
encode('shl') -> <<16#1B:8/big>>;
encode('shr') -> <<16#1C:8/big>>;
encode('sar') -> <<16#1D:8/big>>;
encode('sha3') -> <<16#20:8/big>>;
encode('address') -> <<16#30:8/big>>;
encode('balance') -> <<16#31:8/big>>;
encode('origin') -> <<16#32:8/big>>;
encode('caller') -> <<16#33:8/big>>;
encode('callvalue') -> <<16#34:8/big>>;
encode('calldataload') -> <<16#35:8/big>>;
encode('calldatasize') -> <<16#36:8/big>>;
encode('calldatacopy') -> <<16#37:8/big>>;
encode('codesize') -> <<16#38:8/big>>;
encode('codecopy') -> <<16#39:8/big>>;
encode('gasprice') -> <<16#3A:8/big>>;
encode('extcodesize') -> <<16#3B:8/big>>;
encode('extcodecopy') -> <<16#3C:8/big>>;
encode('returndatasize') -> <<16#3D:8/big>>;
encode('returndatacopy') -> <<16#3E:8/big>>;
encode('extcodehash') -> <<16#3F:8/big>>;
encode('blockhash') -> <<16#40:8/big>>;
encode('coinbase') -> <<16#41:8/big>>;
encode('timestamp') -> <<16#42:8/big>>;
encode('number') -> <<16#43:8/big>>;
encode('difficulty') -> <<16#44:8/big>>;
encode('gaslimit') -> <<16#45:8/big>>;
encode('chainid') -> <<16#46:8/big>>;
encode('selfbalance') -> <<16#47:8/big>>;
encode('basefee') -> <<16#48:8/big>>;
encode('pop') -> <<16#50:8/big>>;
encode('mload') -> <<16#51:8/big>>;
encode('mstore') -> <<16#52:8/big>>;
encode('mstore8') -> <<16#53:8/big>>;
encode('sload') -> <<16#54:8/big>>;
encode('sstore') -> <<16#55:8/big>>;
encode('jump') -> <<16#56:8/big>>;
encode('jumpi') -> <<16#57:8/big>>;
encode('pc') -> <<16#58:8/big>>;
encode('msize') -> <<16#59:8/big>>;
encode('gas') -> <<16#5A:8/big>>;
encode('jumpdest') -> <<16#5B:8/big>>;
encode('tload') -> <<16#5C:8/big>>;
encode('tstore') -> <<16#5D:8/big>>;
encode('mcopy') -> <<16#5E:8/big>>;
encode('push0') -> <<16#5F:8/big>>;
encode({push,1,Data}) -> <<16#60:8/big,Data:8/big>>;
encode({push,2,Data}) -> <<16#61:8/big,Data:16/big>>;
encode({push,3,Data}) -> <<16#62:8/big,Data:24/big>>;
encode({push,4,Data}) -> <<16#63:8/big,Data:32/big>>;
encode({push,5,Data}) -> <<16#64:8/big,Data:40/big>>;
encode({push,6,Data}) -> <<16#65:8/big,Data:48/big>>;
encode({push,7,Data}) -> <<16#66:8/big,Data:56/big>>;
encode({push,8,Data}) -> <<16#67:8/big,Data:64/big>>;
encode({push,9,Data}) -> <<16#68:8/big,Data:72/big>>;
encode({push,10,Data}) -> <<16#69:8/big,Data:80/big>>;
encode({push,11,Data}) -> <<16#6A:8/big,Data:88/big>>;
encode({push,12,Data}) -> <<16#6B:8/big,Data:96/big>>;
encode({push,13,Data}) -> <<16#6C:8/big,Data:104/big>>;
encode({push,14,Data}) -> <<16#6D:8/big,Data:112/big>>;
encode({push,15,Data}) -> <<16#6E:8/big,Data:120/big>>;
encode({push,16,Data}) -> <<16#6F:8/big,Data:128/big>>;
encode({push,17,Data}) -> <<16#70:8/big,Data:136/big>>;
encode({push,18,Data}) -> <<16#71:8/big,Data:144/big>>;
encode({push,19,Data}) -> <<16#72:8/big,Data:152/big>>;
encode({push,20,Data}) -> <<16#73:8/big,Data:160/big>>;
encode({push,21,Data}) -> <<16#74:8/big,Data:168/big>>;
encode({push,22,Data}) -> <<16#75:8/big,Data:176/big>>;
encode({push,23,Data}) -> <<16#76:8/big,Data:184/big>>;
encode({push,24,Data}) -> <<16#77:8/big,Data:192/big>>;
encode({push,25,Data}) -> <<16#78:8/big,Data:200/big>>;
encode({push,26,Data}) -> <<16#79:8/big,Data:208/big>>;
encode({push,27,Data}) -> <<16#7A:8/big,Data:216/big>>;
encode({push,28,Data}) -> <<16#7B:8/big,Data:224/big>>;
encode({push,29,Data}) -> <<16#7C:8/big,Data:232/big>>;
encode({push,30,Data}) -> <<16#7D:8/big,Data:240/big>>;
encode({push,31,Data}) -> <<16#7E:8/big,Data:248/big>>;
encode({push,32,Data}) -> <<16#7F:8/big,Data:256/big>>;
encode({dup,1}) -> <<16#80:8/big>>;
encode({dup,2}) -> <<16#81:8/big>>;
encode({dup,3}) -> <<16#82:8/big>>;
encode({dup,4}) -> <<16#83:8/big>>;
encode({dup,5}) -> <<16#84:8/big>>;
encode({dup,6}) -> <<16#85:8/big>>;
encode({dup,7}) -> <<16#86:8/big>>;
encode({dup,8}) -> <<16#87:8/big>>;
encode({dup,9}) -> <<16#88:8/big>>;
encode({dup,10}) -> <<16#89:8/big>>;
encode({dup,11}) -> <<16#8A:8/big>>;
encode({dup,12}) -> <<16#8B:8/big>>;
encode({dup,13}) -> <<16#8C:8/big>>;
encode({dup,14}) -> <<16#8D:8/big>>;
encode({dup,15}) -> <<16#8E:8/big>>;
encode({dup,16}) -> <<16#8F:8/big>>;
encode({swap,1}) -> <<16#90:8/big>>;
encode({swap,2}) -> <<16#91:8/big>>;
encode({swap,3}) -> <<16#92:8/big>>;
encode({swap,4}) -> <<16#93:8/big>>;
encode({swap,5}) -> <<16#94:8/big>>;
encode({swap,6}) -> <<16#95:8/big>>;
encode({swap,7}) -> <<16#96:8/big>>;
encode({swap,8}) -> <<16#97:8/big>>;
encode({swap,9}) -> <<16#98:8/big>>;
encode({swap,10}) -> <<16#99:8/big>>;
encode({swap,11}) -> <<16#9A:8/big>>;
encode({swap,12}) -> <<16#9B:8/big>>;
encode({swap,13}) -> <<16#9C:8/big>>;
encode({swap,14}) -> <<16#9D:8/big>>;
encode({swap,15}) -> <<16#9E:8/big>>;
encode({swap,16}) -> <<16#9F:8/big>>;
encode({log,0}) -> <<16#A0:8/big>>;
encode({log,1}) -> <<16#A1:8/big>>;
encode({log,2}) -> <<16#A2:8/big>>;
encode({log,3}) -> <<16#A3:8/big>>;
encode({log,4}) -> <<16#A4:8/big>>;
encode('create') -> <<16#F0:8/big>>;
encode('call') -> <<16#F1:8/big>>;
encode('callcode') -> <<16#F2:8/big>>;
encode('return') -> <<16#F3:8/big>>;
encode('delegatecall') -> <<16#F4:8/big>>;
encode('create2') -> <<16#F5:8/big>>;
encode('staticcall') -> <<16#FA:8/big>>;
encode('revert') -> <<16#FD:8/big>>;
encode('invalid') -> <<16#FE:8/big>>;
encode('selfdestruct') -> <<16#FF:8/big>>;
encode(Instr) -> throw({unknown_instruction,Instr}).
